namespace uipc::backend::cuda::analyticalBarrier
{
namespace details
{
    template <typename T>
    MUDA_GENERIC void pFpx_parallel_pe(
        T d, T x11, T x12, T x13, T x21, T x22, T x23, T x31, T x32, T x33, T x41, T x42, T x43, T result[12][9])
    {
        T t102;
        T t103;
        T t104;
        T t21;
        T t22;
        T t23;
        T t24;
        T t25;
        T t26;
        T t27;
        T t28;
        T t29;
        T t30;
        T t31;
        T t32;
        T t58;
        T t59;
        T t60;
        T t61;
        T t62;
        T t63;
        T t64;
        T t65;
        T t8;
        T t92;
        T t94;
        T t96;
        T t97;
        T t98;
        T t99;
        /* pFpx_ppe */
        /*     RESULT = pFpx_ppe(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
        /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
        /*     20-Mar-2022 15:07:54 */
        t8           = 1.0 / d;
        t21          = -x21 + x11;
        t22          = -x22 + x12;
        t23          = -x23 + x13;
        t24          = -x31 + x11;
        t25          = -x32 + x12;
        t26          = -x33 + x13;
        t27          = -x41 + x11;
        t28          = -x31 + x21;
        t29          = -x42 + x12;
        t30          = -x32 + x22;
        t31          = -x43 + x13;
        t32          = -x33 + x23;
        t58          = 1.0 / ((t28 * t28 + t30 * t30) + t32 * t32);
        t60          = t21 * t25 + -(t22 * t24);
        t61          = t21 * t26 + -(t23 * t24);
        t62          = t22 * t26 + -(t23 * t25);
        t63          = t27 * t30 + -(t28 * t29);
        t64          = t27 * t32 + -(t28 * t31);
        t65          = t29 * t32 + -(t30 * t31);
        t59          = t58 * t58;
        t92          = (t60 * t60 + t61 * t61) + t62 * t62;
        t94          = 1.0 / sqrt((t63 * t63 + t64 * t64) + t65 * t65);
        t97          = (x21 * 2.0 + -(x31 * 2.0)) * t59 * t92;
        t98          = (x22 * 2.0 + -(x32 * 2.0)) * t59 * t92;
        t99          = (x23 * 2.0 + -(x33 * 2.0)) * t59 * t92;
        t96          = 1.0 / sqrt(t58 * t92);
        t102         = (t29 * t63 * 2.0 + t31 * t64 * 2.0) * t94 / 2.0;
        t103         = (t30 * t63 * 2.0 + t32 * t64 * 2.0) * t94 / 2.0;
        t104         = (t27 * t64 * 2.0 + t29 * t65 * 2.0) * t94 / 2.0;
        t64          = (t28 * t64 * 2.0 + t30 * t65 * 2.0) * t94 / 2.0;
        t29          = (t27 * t63 * 2.0 + -(t31 * t65 * 2.0)) * t94 / 2.0;
        t59          = (t28 * t63 * 2.0 + -(t32 * t65 * 2.0)) * t94 / 2.0;
        result[0][0] = 0.0;
        result[0][1] = 0.0;
        result[0][2] = 0.0;
        result[0][3] = 0.0;
        result[0][4] = t103;
        result[0][5] = 0.0;
        result[0][6] = 0.0;
        result[0][7] = 0.0;
        t92          = t8 * t58 * t96;
        result[0][8] = t92 * (t30 * t60 * 2.0 + t32 * t61 * 2.0) / 2.0;
        result[1][0] = 0.0;
        result[1][1] = 0.0;
        result[1][2] = 0.0;
        result[1][3] = 0.0;
        result[1][4] = -t59;
        result[1][5] = 0.0;
        result[1][6] = 0.0;
        result[1][7] = 0.0;
        result[1][8] = t92 * (t28 * t60 * 2.0 - t32 * t62 * 2.0) * -0.5;
        result[2][0] = 0.0;
        result[2][1] = 0.0;
        result[2][2] = 0.0;
        result[2][3] = 0.0;
        result[2][4] = -t64;
        result[2][5] = 0.0;
        result[2][6] = 0.0;
        result[2][7] = 0.0;
        result[2][8] = t92 * (t28 * t61 * 2.0 + t30 * t62 * 2.0) * -0.5;
        result[3][0] = 0.0;
        result[3][1] = 0.0;
        result[3][2] = 0.0;
        result[3][3] = 0.0;
        result[3][4] = -t102;
        result[3][5] = 0.0;
        result[3][6] = 0.0;
        result[3][7] = 0.0;
        t92          = t8 * t96;
        result[3][8] = t92 * (t97 + t58 * (t25 * t60 * 2.0 + t26 * t61 * 2.0)) * -0.5;
        result[4][0] = 0.0;
        result[4][1] = 0.0;
        result[4][2] = 0.0;
        result[4][3] = 0.0;
        result[4][4] = t29;
        result[4][5] = 0.0;
        result[4][6] = 0.0;
        result[4][7] = 0.0;
        result[4][8] = t92 * (t98 - t58 * (t24 * t60 * 2.0 - t26 * t62 * 2.0)) * -0.5;
        result[5][0] = 0.0;
        result[5][1] = 0.0;
        result[5][2] = 0.0;
        result[5][3] = 0.0;
        result[5][4] = t104;
        result[5][5] = 0.0;
        result[5][6] = 0.0;
        result[5][7] = 0.0;
        result[5][8] = t92 * (t99 - t58 * (t24 * t61 * 2.0 + t25 * t62 * 2.0)) * -0.5;
        result[6][0] = 0.0;
        result[6][1] = 0.0;
        result[6][2] = 0.0;
        result[6][3] = 0.0;
        result[6][4] = t102;
        result[6][5] = 0.0;
        result[6][6] = 0.0;
        result[6][7] = 0.0;
        result[6][8] = t92 * (t97 + t58 * (t22 * t60 * 2.0 + t23 * t61 * 2.0)) / 2.0;
        result[7][0] = 0.0;
        result[7][1] = 0.0;
        result[7][2] = 0.0;
        result[7][3] = 0.0;
        result[7][4] = -t29;
        result[7][5] = 0.0;
        result[7][6] = 0.0;
        result[7][7] = 0.0;
        result[7][8] = t92 * (t98 - t58 * (t21 * t60 * 2.0 - t23 * t62 * 2.0)) / 2.0;
        result[8][0] = 0.0;
        result[8][1] = 0.0;
        result[8][2] = 0.0;
        result[8][3] = 0.0;
        result[8][4] = -t104;
        result[8][5] = 0.0;
        result[8][6] = 0.0;
        result[8][7] = 0.0;
        result[8][8] = t92 * (t99 - t58 * (t21 * t61 * 2.0 + t22 * t62 * 2.0)) / 2.0;
        result[9][0]  = 0.0;
        result[9][1]  = 0.0;
        result[9][2]  = 0.0;
        result[9][3]  = 0.0;
        result[9][4]  = -t103;
        result[9][5]  = 0.0;
        result[9][6]  = 0.0;
        result[9][7]  = 0.0;
        result[9][8]  = 0.0;
        result[10][0] = 0.0;
        result[10][1] = 0.0;
        result[10][2] = 0.0;
        result[10][3] = 0.0;
        result[10][4] = t59;
        result[10][5] = 0.0;
        result[10][6] = 0.0;
        result[10][7] = 0.0;
        result[10][8] = 0.0;
        result[11][0] = 0.0;
        result[11][1] = 0.0;
        result[11][2] = 0.0;
        result[11][3] = 0.0;
        result[11][4] = t64;
        result[11][5] = 0.0;
        result[11][6] = 0.0;
        result[11][7] = 0.0;
        result[11][8] = 0.0;
    }

}  // namespace details

template <class T>
MUDA_GENERIC void analytical_parallel_point_edge_pFpx(const Eigen::Vector<T, 3>& e0,
                                                      const Eigen::Vector<T, 3>& e2,
                                                      const Eigen::Vector<T, 3>& e3,
                                                      const Eigen::Vector<T, 3>& e1,
                                                      T d_hatSqrt,
                                                      T result[12][9])
{
    details::pFpx_parallel_pe(
        d_hatSqrt, e0[0], e0[1], e0[2], e2[0], e2[1], e2[2], e3[0], e3[1], e3[2], e1[0], e1[1], e1[2], result);
}

}  // namespace uipc::backend::cuda::analyticalBarrier
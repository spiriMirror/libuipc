namespace uipc::backend::cuda::analyticalBarrier
{
namespace details
{
    template <typename T>
    MUDA_GENERIC void pFpx_parallel_pp(
        T d, T x11, T x12, T x13, T x21, T x22, T x23, T x31, T x32, T x33, T x41, T x42, T x43, T result[12][9])
    {
        T t24;
        T t25;
        T t26;
        T t27;
        T t28;
        T t29;
        T t46;
        T t47;
        T t48;
        T t49;
        T t67;
        T t68;
        T t69;
        T t78;
        T t8;
        T t81;
        T t82;
        /* pFpx_ppp */
        /*     RESULT = pFpx_ppp(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
        /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
        /*     20-Mar-2022 16:56:25 */
        t8            = 1.0 / d;
        t49           = -x21 + x11;
        t82           = -x22 + x12;
        t81           = -x23 + x13;
        t24           = -x31 + x11;
        t25           = -x32 + x12;
        t26           = -x33 + x13;
        t27           = -x41 + x21;
        t28           = -x42 + x22;
        t29           = -x43 + x23;
        t46           = t24 * t28 + -(t25 * t27);
        t47           = t24 * t29 + -(t26 * t27);
        t48           = t25 * t29 + -(t26 * t28);
        t49           = 1.0 / sqrt((t49 * t49 + t82 * t82) + t81 * t81);
        t67           = t8 * (x11 * 2.0 + -(x21 * 2.0)) * t49 / 2.0;
        t68           = t8 * (x12 * 2.0 + -(x22 * 2.0)) * t49 / 2.0;
        t69           = t8 * (x13 * 2.0 + -(x23 * 2.0)) * t49 / 2.0;
        t49           = 1.0 / sqrt((t46 * t46 + t47 * t47) + t48 * t48);
        t78           = (t25 * t46 * 2.0 + t26 * t47 * 2.0) * t49 / 2.0;
        t8            = (t24 * t47 * 2.0 + t25 * t48 * 2.0) * t49 / 2.0;
        t25           = (t28 * t46 * 2.0 + t29 * t47 * 2.0) * t49 / 2.0;
        t81           = (t27 * t47 * 2.0 + t28 * t48 * 2.0) * t49 / 2.0;
        t82           = (t24 * t46 * 2.0 + -(t26 * t48 * 2.0)) * t49 / 2.0;
        t49           = (t27 * t46 * 2.0 + -(t29 * t48 * 2.0)) * t49 / 2.0;
        result[0][0]  = 0.0;
        result[0][1]  = 0.0;
        result[0][2]  = 0.0;
        result[0][3]  = 0.0;
        result[0][4]  = t25;
        result[0][5]  = 0.0;
        result[0][6]  = 0.0;
        result[0][7]  = 0.0;
        result[0][8]  = t67;
        result[1][0]  = 0.0;
        result[1][1]  = 0.0;
        result[1][2]  = 0.0;
        result[1][3]  = 0.0;
        result[1][4]  = -t49;
        result[1][5]  = 0.0;
        result[1][6]  = 0.0;
        result[1][7]  = 0.0;
        result[1][8]  = t68;
        result[2][0]  = 0.0;
        result[2][1]  = 0.0;
        result[2][2]  = 0.0;
        result[2][3]  = 0.0;
        result[2][4]  = -t81;
        result[2][5]  = 0.0;
        result[2][6]  = 0.0;
        result[2][7]  = 0.0;
        result[2][8]  = t69;
        result[3][0]  = 0.0;
        result[3][1]  = 0.0;
        result[3][2]  = 0.0;
        result[3][3]  = 0.0;
        result[3][4]  = -t78;
        result[3][5]  = 0.0;
        result[3][6]  = 0.0;
        result[3][7]  = 0.0;
        result[3][8]  = -t67;
        result[4][0]  = 0.0;
        result[4][1]  = 0.0;
        result[4][2]  = 0.0;
        result[4][3]  = 0.0;
        result[4][4]  = t82;
        result[4][5]  = 0.0;
        result[4][6]  = 0.0;
        result[4][7]  = 0.0;
        result[4][8]  = -t68;
        result[5][0]  = 0.0;
        result[5][1]  = 0.0;
        result[5][2]  = 0.0;
        result[5][3]  = 0.0;
        result[5][4]  = t8;
        result[5][5]  = 0.0;
        result[5][6]  = 0.0;
        result[5][7]  = 0.0;
        result[5][8]  = -t69;
        result[6][0]  = 0.0;
        result[6][1]  = 0.0;
        result[6][2]  = 0.0;
        result[6][3]  = 0.0;
        result[6][4]  = -t25;
        result[6][5]  = 0.0;
        result[6][6]  = 0.0;
        result[6][7]  = 0.0;
        result[6][8]  = 0.0;
        result[7][0]  = 0.0;
        result[7][1]  = 0.0;
        result[7][2]  = 0.0;
        result[7][3]  = 0.0;
        result[7][4]  = t49;
        result[7][5]  = 0.0;
        result[7][6]  = 0.0;
        result[7][7]  = 0.0;
        result[7][8]  = 0.0;
        result[8][0]  = 0.0;
        result[8][1]  = 0.0;
        result[8][2]  = 0.0;
        result[8][3]  = 0.0;
        result[8][4]  = t81;
        result[8][5]  = 0.0;
        result[8][6]  = 0.0;
        result[8][7]  = 0.0;
        result[8][8]  = 0.0;
        result[9][0]  = 0.0;
        result[9][1]  = 0.0;
        result[9][2]  = 0.0;
        result[9][3]  = 0.0;
        result[9][4]  = t78;
        result[9][5]  = 0.0;
        result[9][6]  = 0.0;
        result[9][7]  = 0.0;
        result[9][8]  = 0.0;
        result[10][0] = 0.0;
        result[10][1] = 0.0;
        result[10][2] = 0.0;
        result[10][3] = 0.0;
        result[10][4] = -t82;
        result[10][5] = 0.0;
        result[10][6] = 0.0;
        result[10][7] = 0.0;
        result[10][8] = 0.0;
        result[11][0] = 0.0;
        result[11][1] = 0.0;
        result[11][2] = 0.0;
        result[11][3] = 0.0;
        result[11][4] = -t8;
        result[11][5] = 0.0;
        result[11][6] = 0.0;
        result[11][7] = 0.0;
        result[11][8] = 0.0;
    }

}  // namespace details

template <class T>
MUDA_GENERIC void analytical_parallel_point_point_pFpx(const Eigen::Vector<T, 3>& e0,
                                                       const Eigen::Vector<T, 3>& e2,
                                                       const Eigen::Vector<T, 3>& e1,
                                                       const Eigen::Vector<T, 3>& e3,
                                                       T d_hatSqrt,
                                                       T result[12][9])
{
    details::pFpx_parallel_pp(
        d_hatSqrt, e0[0], e0[1], e0[2], e2[0], e2[1], e2[2], e1[0], e1[1], e1[2], e3[0], e3[1], e3[2], result);
}

}  // namespace uipc::backend::cuda::analyticalBarrier
namespace uipc::backend::cuda::analyticalBarrier
{
namespace details
{
    template <typename T>
    MUDA_GENERIC void pFpx_parallel_ee(
        T d, T x11, T x12, T x13, T x21, T x22, T x23, T x31, T x32, T x33, T x41, T x42, T x43, T result[12][9])
    {
        T t12;
        T t13;
        T t14;
        T t15;
        T t16;
        T t17;
        T t18;
        T t19;
        T t20;
        T t33;
        T t34;
        T t35;
        T t36;
        T t37;
        T t38;
        T t45;
        T t46;
        T t47;
        T t69;
        T t70;
        T t71;
        T t72;
        T t73;
        T t74;
        T t76;
        T t77;
        T t79;
        T t80;
        T t81;
        T t82;
        T t83;
        T t84;
        T t85;
        T t86;
        T t89;
        T t90;
        /* pFpx_pee */
        /*     RESULT = pFpx_pee(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
        /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
        /*     17-Mar-2022 15:23:02 */
        t12           = -x21 + x11;
        t13           = -x22 + x12;
        t14           = -x23 + x13;
        t15           = -x31 + x11;
        t16           = -x32 + x12;
        t17           = -x33 + x13;
        t18           = -x41 + x31;
        t19           = -x42 + x32;
        t20           = -x43 + x33;
        t33           = t15 * t19;
        t34           = t16 * t18;
        t35           = t15 * t20;
        t36           = t17 * t18;
        t37           = t16 * t20;
        t38           = t17 * t19;
        t45           = t12 * t19 + -(t13 * t18);
        t46           = t12 * t20 + -(t14 * t18);
        t47           = t13 * t20 + -(t14 * t19);
        t69           = t13 * t45 * 2.0 + t14 * t46 * 2.0;
        t70           = t12 * t46 * 2.0 + t13 * t47 * 2.0;
        t71           = t19 * t45 * 2.0 + t20 * t46 * 2.0;
        t72           = t18 * t46 * 2.0 + t19 * t47 * 2.0;
        t19           = (t45 * t45 + t46 * t46) + t47 * t47;
        t73           = t12 * t45 * 2.0 + -(t14 * t47 * 2.0);
        t74           = t18 * t45 * 2.0 + -(t20 * t47 * 2.0);
        t76           = 1.0 / t19;
        t19           = 1.0 / sqrt(t19);
        t79           = (t17 * t45 + t15 * t47) + -(t16 * t46);
        t77           = t76 * t76;
        t80           = t79 * t79;
        t81           = t69 * t19 / 2.0;
        t82           = t70 * t19 / 2.0;
        t83           = t71 * t19 / 2.0;
        t84           = t72 * t19 / 2.0;
        t85           = t73 * t19 / 2.0;
        t86           = t74 * t19 / 2.0;
        t89           = t69 * t77 * t80;
        t90           = t70 * t77 * t80;
        t20           = t71 * t77 * t80;
        t18           = t72 * t77 * t80;
        t71           = t73 * t77 * t80;
        t19           = t74 * t77 * t80;
        result[0][0]  = 0.0;
        result[0][1]  = 0.0;
        result[0][2]  = 0.0;
        result[0][3]  = 0.0;
        result[0][4]  = t83;
        result[0][5]  = 0.0;
        result[0][6]  = 0.0;
        result[0][7]  = 0.0;
        t70           = t76 * t79;
        t69           = 1.0 / d * (1.0 / sqrt(t76 * t80));
        result[0][8]  = t69 * (t20 - t70 * ((-t37 + t38) + t47) * 2.0) * -0.5;
        result[1][0]  = 0.0;
        result[1][1]  = 0.0;
        result[1][2]  = 0.0;
        result[1][3]  = 0.0;
        result[1][4]  = -t86;
        result[1][5]  = 0.0;
        result[1][6]  = 0.0;
        result[1][7]  = 0.0;
        result[1][8]  = t69 * (t19 - t70 * ((-t35 + t36) + t46) * 2.0) / 2.0;
        result[2][0]  = 0.0;
        result[2][1]  = 0.0;
        result[2][2]  = 0.0;
        result[2][3]  = 0.0;
        result[2][4]  = -t84;
        result[2][5]  = 0.0;
        result[2][6]  = 0.0;
        result[2][7]  = 0.0;
        result[2][8]  = t69 * (t18 + t70 * ((-t33 + t34) + t45) * 2.0) / 2.0;
        result[3][0]  = 0.0;
        result[3][1]  = 0.0;
        result[3][2]  = 0.0;
        result[3][3]  = 0.0;
        result[3][4]  = -t83;
        result[3][5]  = 0.0;
        result[3][6]  = 0.0;
        result[3][7]  = 0.0;
        result[3][8]  = t69 * (t20 + t70 * (t37 - t38) * 2.0) / 2.0;
        result[4][0]  = 0.0;
        result[4][1]  = 0.0;
        result[4][2]  = 0.0;
        result[4][3]  = 0.0;
        result[4][4]  = t86;
        result[4][5]  = 0.0;
        result[4][6]  = 0.0;
        result[4][7]  = 0.0;
        result[4][8]  = t69 * (t19 + t70 * (t35 - t36) * 2.0) * -0.5;
        result[5][0]  = 0.0;
        result[5][1]  = 0.0;
        result[5][2]  = 0.0;
        result[5][3]  = 0.0;
        result[5][4]  = t84;
        result[5][5]  = 0.0;
        result[5][6]  = 0.0;
        result[5][7]  = 0.0;
        result[5][8]  = t69 * (t18 - t70 * (t33 - t34) * 2.0) * -0.5;
        result[6][0]  = 0.0;
        result[6][1]  = 0.0;
        result[6][2]  = 0.0;
        result[6][3]  = 0.0;
        result[6][4]  = -t81;
        result[6][5]  = 0.0;
        result[6][6]  = 0.0;
        result[6][7]  = 0.0;
        t20           = t13 * t17 + -(t14 * t16);
        result[6][8]  = t69 * (t89 - t70 * (t20 + t47) * 2.0) / 2.0;
        result[7][0]  = 0.0;
        result[7][1]  = 0.0;
        result[7][2]  = 0.0;
        result[7][3]  = 0.0;
        result[7][4]  = t85;
        result[7][5]  = 0.0;
        result[7][6]  = 0.0;
        result[7][7]  = 0.0;
        t18           = t12 * t17 + -(t14 * t15);
        result[7][8]  = t69 * (t71 - t70 * (t18 + t46) * 2.0) * -0.5;
        result[8][0]  = 0.0;
        result[8][1]  = 0.0;
        result[8][2]  = 0.0;
        result[8][3]  = 0.0;
        result[8][4]  = t82;
        result[8][5]  = 0.0;
        result[8][6]  = 0.0;
        result[8][7]  = 0.0;
        t19           = t12 * t16 + -(t13 * t15);
        result[8][8]  = t69 * (t90 + t70 * (t19 + t45) * 2.0) * -0.5;
        result[9][0]  = 0.0;
        result[9][1]  = 0.0;
        result[9][2]  = 0.0;
        result[9][3]  = 0.0;
        result[9][4]  = t81;
        result[9][5]  = 0.0;
        result[9][6]  = 0.0;
        result[9][7]  = 0.0;
        result[9][8]  = t69 * (t89 - t70 * t20 * 2.0) * -0.5;
        result[10][0] = 0.0;
        result[10][1] = 0.0;
        result[10][2] = 0.0;
        result[10][3] = 0.0;
        result[10][4] = -t85;
        result[10][5] = 0.0;
        result[10][6] = 0.0;
        result[10][7] = 0.0;
        result[10][8] = t69 * (t71 - t70 * t18 * 2.0) / 2.0;
        result[11][0] = 0.0;
        result[11][1] = 0.0;
        result[11][2] = 0.0;
        result[11][3] = 0.0;
        result[11][4] = -t82;
        result[11][5] = 0.0;
        result[11][6] = 0.0;
        result[11][7] = 0.0;
        result[11][8] = t69 * (t90 + t70 * t19 * 2.0) / 2.0;
    }


}  // namespace details

template <class T>
MUDA_GENERIC void analytical_parallel_edge_edge_pFpx(const Eigen::Vector<T, 3>& e0,
                                                     const Eigen::Vector<T, 3>& e1,
                                                     const Eigen::Vector<T, 3>& e2,
                                                     const Eigen::Vector<T, 3>& e3,
                                                     T d_hatSqrt,
                                                     T result[12][9])
{
    details::pFpx_parallel_ee(
        d_hatSqrt, e0[0], e0[1], e0[2], e1[0], e1[1], e1[2], e2[0], e2[1], e2[2], e3[0], e3[1], e3[2], result);
}

}  // namespace uipc::backend::cuda::analyticalBarrier
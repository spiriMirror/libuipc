namespace uipc::backend::cuda::analyticalBarrier
{
namespace details
{
template <typename T>
MUDA_GENERIC void pFpx_pt(T d,
                                  T x11,
                                  T x12,
                                  T x13,
                                  T x21,
                                  T x22,
                                  T x23,
                                  T x31,
                                  T x32,
                                  T x33,
                                  T x41,
                                  T x42,
                                  T x43,
                                  T result[12][9])
{
    T b_d;
    T t12;
    T t13;
    T t14;
    T t15;
    T t16;
    T t17;
    T t18;
    T t19;
    T t2;
    T t20;
    T t21;
    T t22;
    T t23;
    T t33;
    T t34;
    T t35;
    T t44;
    T t46;
    T t47;
    T t49;
    /* pFpx_pt */
    /*     RESULT = pFpx_pt(D,X11,X12,X13,X21,X22,X23,X31,X32,X33,X41,X42,X43) */
    /*     This function was generated by the Symbolic Math Toolbox version 9.0.
     */
    /*     30-Apr-2022 16:12:13 */
    t2           = 1.0 / d;
    t12          = -x21 + x11;
    t13          = -x22 + x12;
    t14          = -x23 + x13;
    t15          = -x31 + x21;
    t16          = -x32 + x22;
    t17          = -x33 + x23;
    t18          = -x41 + x21;
    t19          = -x42 + x22;
    t20          = -x43 + x23;
    t21          = -x41 + x31;
    t22          = -x42 + x32;
    t23          = -x43 + x33;
    t33          = t15 * t19 + -(t16 * t18);
    t34          = t15 * t20 + -(t17 * t18);
    t35          = t16 * t20 + -(t17 * t19);
    t44          = 1.0 / ((t33 * t33 + t34 * t34) + t35 * t35);
    t46          = (t14 * t33 + t12 * t35) + -(t13 * t34);
    t47          = t46 * t46;
    t49          = 1.0 / sqrt(t44 * t47);
    result[0][0] = 0;
    result[0][1] = 0;
    result[0][2] = 0;
    result[0][3] = 0;
    result[0][4] = 0;
    result[0][5] = 0;
    result[0][6] = 0;
    result[0][7] = 0;
    result[0][8] = t2 * t35 * t44 * t46 * t49;

    result[1][0] = 0;
    result[1][1] = 0;
    result[1][2] = 0;
    result[1][3] = 0;
    result[1][4] = 0;
    result[1][5] = 0;
    result[1][6] = 0;
    result[1][7] = 0;
    result[1][8] = -t2 * t34 * t44 * t46 * t49;

    result[2][0] = 0;
    result[2][1] = 0;
    result[2][2] = 0;
    result[2][3] = 0;
    result[2][4] = 0;
    result[2][5] = 0;
    result[2][6] = 0;
    result[2][7] = 0;
    result[2][8] = t2 * t33 * t44 * t46 * t49;
    b_d          = t44 * t44 * t47;
    t44 *= t46;
    t47          = t2 * t49;
    result[3][0] = 0;
    result[3][1] = 0;
    result[3][2] = 0;
    result[3][3] = 0;
    result[3][4] = 0;
    result[3][5] = 0;
    result[3][6] = 0;
    result[3][7] = 0;
    result[3][8] = t47
                   * (b_d * (t22 * t33 * 2.0 + t23 * t34 * 2.0)
                      + t44 * ((t35 + t13 * t23) - t14 * t22) * 2.0)
                   * -0.5;
    result[4][0] = 0;
    result[4][1] = 0;
    result[4][2] = 0;
    result[4][3] = 0;
    result[4][4] = 0;
    result[4][5] = 0;
    result[4][6] = 0;
    result[4][7] = 0;
    result[4][8] = t47
                   * (b_d * (t21 * t33 * 2.0 - t23 * t35 * 2.0)
                      + t44 * ((t34 + t12 * t23) - t14 * t21) * 2.0)
                   / 2.0;
    result[5][0] = 0;
    result[5][1] = 0;
    result[5][2] = 0;
    result[5][3] = 0;
    result[5][4] = 0;
    result[5][5] = 0;
    result[5][6] = 0;
    result[5][7] = 0;
    result[5][8] = t47
                   * (b_d * (t21 * t34 * 2.0 + t22 * t35 * 2.0)
                      - t44 * ((t33 + t12 * t22) - t13 * t21) * 2.0)
                   / 2.0;
    result[6][0] = 0;
    result[6][1] = 0;
    result[6][2] = 0;
    result[6][3] = 0;
    result[6][4] = 0;
    result[6][5] = 0;
    result[6][6] = 0;
    result[6][7] = 0;
    result[6][8] =
        t47 * (t44 * (t13 * t20 - t14 * t19) * 2.0 + b_d * (t19 * t33 * 2.0 + t20 * t34 * 2.0))
        / 2.0;
    result[7][0] = 0;
    result[7][1] = 0;
    result[7][2] = 0;
    result[7][3] = 0;
    result[7][4] = 0;
    result[7][5] = 0;
    result[7][6] = 0;
    result[7][7] = 0;
    result[7][8] =
        t47 * (t44 * (t12 * t20 - t14 * t18) * 2.0 + b_d * (t18 * t33 * 2.0 - t20 * t35 * 2.0))
        * -0.5;
    result[8][0] = 0;
    result[8][1] = 0;
    result[8][2] = 0;
    result[8][3] = 0;
    result[8][4] = 0;
    result[8][5] = 0;
    result[8][6] = 0;
    result[8][7] = 0;
    result[8][8] =
        t47 * (t44 * (t12 * t19 - t13 * t18) * 2.0 - b_d * (t18 * t34 * 2.0 + t19 * t35 * 2.0))
        / 2.0;
    result[9][0] = 0;
    result[9][1] = 0;
    result[9][2] = 0;
    result[9][3] = 0;
    result[9][4] = 0;
    result[9][5] = 0;
    result[9][6] = 0;
    result[9][7] = 0;
    result[9][8] =
        t47 * (t44 * (t13 * t17 - t14 * t16) * 2.0 + b_d * (t16 * t33 * 2.0 + t17 * t34 * 2.0))
        * -0.5;
    result[10][0] = 0;
    result[10][1] = 0;
    result[10][2] = 0;
    result[10][3] = 0;
    result[10][4] = 0;
    result[10][5] = 0;
    result[10][6] = 0;
    result[10][7] = 0;
    result[10][8] =
        t47 * (t44 * (t12 * t17 - t14 * t15) * 2.0 + b_d * (t15 * t33 * 2.0 - t17 * t35 * 2.0))
        / 2.0;
    result[11][0] = 0;
    result[11][1] = 0;
    result[11][2] = 0;
    result[11][3] = 0;
    result[11][4] = 0;
    result[11][5] = 0;
    result[11][6] = 0;
    result[11][7] = 0;
    result[11][8] =
        t47 * (t44 * (t12 * t16 - t13 * t15) * 2.0 - b_d * (t15 * t34 * 2.0 + t16 * t35 * 2.0))
        * -0.5;
}
}

template <class T>
MUDA_GENERIC void analytical_point_triangle_pFpx(const Eigen::Vector<T, 3>& p,
                                                   const Eigen::Vector<T, 3>& t1,
                                                   const Eigen::Vector<T, 3>& t2,
                                                   const Eigen::Vector<T, 3>& t3,
                                                   T d_hatSqrt,
                                                   T result[12][9])
{
    details::pFpx_pt(d_hatSqrt,
        p[0], p[1], p[2], t1[0], t1[1], t1[2], t2[0], t2[1], t2[2], t3[0], t3[1], t3[2], result);
}

}